{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsKeyboardShown;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction useIsKeyboardShown() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isKeyboardShown = _React$useState2[0],\n      setIsKeyboardShown = _React$useState2[1];\n\n  React.useEffect(function () {\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setIsKeyboardShown(true);\n    };\n\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return setIsKeyboardShown(false);\n    };\n\n    if (_reactNative.Platform.OS === 'ios') {\n      _reactNative.Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n\n      _reactNative.Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      _reactNative.Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n\n      _reactNative.Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return function () {\n      if (_reactNative.Platform.OS === 'ios') {\n        _reactNative.Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n\n        _reactNative.Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        _reactNative.Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n\n        _reactNative.Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n  return isKeyboardShown;\n}","map":{"version":3,"sources":["useIsKeyboardShown.tsx"],"names":["React","handleKeyboardShow","setIsKeyboardShown","handleKeyboardHide","Platform","Keyboard"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEe,SAAA,kBAAA,GAA8B;AAAA,wBACGA,KAAK,CAALA,QAAAA,CAA9C,KAA8CA,CADH;AAAA;AAAA,MACrC,eADqC;AAAA,MACrC,kBADqC;;AAG3CA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,aAAMC,kBAAkB,CAAnD,IAAmD,CAAxB;AAAA,KAA3B;;AACA,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,aAAMD,kBAAkB,CAAnD,KAAmD,CAAxB;AAAA,KAA3B;;AAEA,QAAIE,sBAAAA,EAAAA,KAAJ,KAAA,EAA2B;AACzBC,4BAAAA,WAAAA,CAAAA,kBAAAA,EAAAA,kBAAAA;;AACAA,4BAAAA,WAAAA,CAAAA,kBAAAA,EAAAA,kBAAAA;AAFF,KAAA,MAGO;AACLA,4BAAAA,WAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;;AACAA,4BAAAA,WAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACD;;AAED,WAAO,YAAM;AACX,UAAID,sBAAAA,EAAAA,KAAJ,KAAA,EAA2B;AACzBC,8BAAAA,cAAAA,CAAAA,kBAAAA,EAAAA,kBAAAA;;AACAA,8BAAAA,cAAAA,CAAAA,kBAAAA,EAAAA,kBAAAA;AAFF,OAAA,MAGO;AACLA,8BAAAA,cAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;;AACAA,8BAAAA,cAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACD;AAPH,KAAA;AAZFL,GAAAA,EAAAA,EAAAA;AAuBA,SAAA,eAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n"]},"metadata":{},"sourceType":"script"}